{"version":3,"sources":["webpack:///webpack/bootstrap 7c47577e12c58f78217d","webpack:///./index.js","webpack:///./src/middleware.js","webpack:///./src/cableCar.js"],"names":["middleware","car","action","type","unsubscribe","__ActionCable","send","optimistic","next","store","getState","connect","channel","CableCar","initialize","ActionCable","createConsumer","subscriptions","create","initialized","connected","disconnected","received","rejected","dispatch","msg","Object","assign","data","perform","subscription"],"mappings":"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","file":"cablecar.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7c47577e12c58f78217d","import middleware from './src/middleware';\n\nexport default middleware\n\n\n// WEBPACK FOOTER //\n// ./index.js","import CableCar from './cableCar'\n\nconst middleware = store => {\n  \n  var car;\n  \n  return next => action => {\n\n    if (action.type === 'CABLE_CAR_INITIALIZED') {\n      car = action.car;\n    } else if (action.type === 'DISCONNECT_CABLE_CAR') {\n      car.unsubscribe();\n    } else if (!action.__ActionCable) {\n      car.send(action);\n    }\n  \n    return (action.optimistic || action.__ActionCable ? next(action) : store.getState())\n\n  }\n};\n\nmiddleware.connect = (store, channel) => new CableCar(store, channel)\n\n\nexport default middleware\n\n\n// WEBPACK FOOTER //\n// ./src/middleware.js","class CableCar {\n\n  constructor(store, channel) {\n\n    if (typeof ActionCable == 'undefined') {\n      throw(`CableCar tried to connect to ActionCable but ActionCable is not defined`);\n    }\n\n    this.channel = channel;\n    this.store = store;\n    this.subscription = this.initialize();\n  }\n\n  initialize = () => \n    \n    ActionCable.createConsumer().subscriptions.create({ channel: this.channel }, {\n      initialized: this.initialized,\n      connected: this.connected,\n      disconnected: this.disconnected,\n      received: this.received,\n      rejected: this.rejected,\n    })\n  \n  // Redux dispatch function\n  dispatch = (msg) => this.store.dispatch(Object.assign(msg, {__ActionCable: true}))\n\n  // ActionCable callback functions\n  initialized = () => this.dispatch({ type: 'CABLE_CAR_INITIALIZED', car: this })\n  \n  connected = () => this.dispatch({ type: 'CABLE_CAR_CONNECTED' })\n  \n  disconnected = () => this.dispatch({ type: 'CABLE_CAR_DISCONNECTED' })\n  \n  received = (msg) => this.dispatch(msg)\n  \n  rejected = (data) => {\n    this.dispatch({ type: 'CABLE_CAR_REJECTED' });\n    throw(`Attempt to connect Redux store and ActionCable channel via CableCar failed. ${data}`)\n  }\n  \n  // ActionCable subscription functions\n  perform = (action, data) => this.subscription.perform(action, data)\n  \n  send = (action) => this.subscription.send(action)\n  \n  unsubscribe = () => this.subscription.unsubscribe()\n\n}\n\n\nexport default CableCar\n\n\n// WEBPACK FOOTER //\n// ./src/cableCar.js"],"sourceRoot":""}